function apv_joint = optimize_apv_joint_fig5_given_ur_cpu(u0, r0)
% Discrete-sampling APV optimizer on aperture [-a, a]
% GIVEN (u0,r0): maximize 1 / ( CRBu(x) + CRBr(x,u0,r0) )
% CPU-only; parfor over candidates. Geometry need not be symmetric
% when u0 ~= 0 (due to the 8*u0*r0^3*cov(x,x^2) term).

% ---- FIX: do NOT override inputs; avoid clearvars inside functions ----
clc; close all;

%% ------------------------- Problem Parameters ---------------------------
lambda = 1.0;
N      = 16;
d      = 0.5*lambda;            % FIX: typical half-wavelength; change if needed
a      = 5*lambda;              % half-aperture; aperture is [-a, a]
M      = 2000;
S      = linspace(-a, +a, M);   % candidates on [-a, a]

% Basic sanity checks for (u0,r0)
if abs(u0) >= 1, error('u0 must satisfy |u0| < 1 (u = cos theta).'); end
if r0 <= 0,     error('r0 must be positive.'); end

% ---- FIX: geometry feasibility check ----
if (N-1)*d > 2*a + 1e-12
    error('(N-1)*d must be <= 2a to place %d elements with spacing %g in [-a,a].', N, d);
end

% Start a CPU pool (prefer thread-based to reduce overhead)
pool = gcp('nocreate');
if isempty(pool)
    try, parpool('threads'); catch, parpool; end
end

%% --------------------- Initialization (two-group ends) ------------------
apv_init = two_group_init_sym(N, d, a);   % ends-loaded, spacing d
apv_star = nan(1, N);                     % sequentially updated positions
apv_fixR = apv_init;                      % right-side placeholders (anchors)

%% ------------------- Sequential update over elements --------------------
% (Optional) outer passes to reduce greediness; set to 1 if not needed
num_outer_pass = 1;   % you can try 2~3 for a tad better optimum

for pass = 1:num_outer_pass
    for n = 1:N
        % Feasible set S_n on [-a,a] w.r.t. left-updated and right-anchors
        S_mask = true(size(S));
        for i = 1:n-1
            S_mask = S_mask & (abs(S - apv_star(i)) >= d - 1e-9);
        end
        for j = n+1:N
            S_mask = S_mask & (abs(S - apv_fixR(j)) >= d - 1e-9);
        end
        S_n = S(S_mask);
        if isempty(S_n)
            error('Feasible set S_n empty at n=%d (pass %d). Increase M or relax constraints.', n, pass);
        end

        % Parallel scoring (CPU-only)
        scores = -inf(1, numel(S_n));
        left_fixed  = apv_star(1:n-1);   %#ok<NASGU>   % read-only for parfor
        right_fixed = apv_fixR(n+1:N);   %#ok<NASGU>
        u_local = u0;                    %#ok<NASGU>
        r_local = r0;                    %#ok<NASGU>

        parfor k = 1:numel(S_n)
            s = S_n(k);
            x_hat = [left_fixed, s, right_fixed];      % candidate APV
            scores(k) = objective_given_ur_cpu_core(x_hat, u_local, r_local);
        end

        % Pick the best candidate for position n and commit
        [~, idx] = max(scores);
        apv_star(n) = S_n(idx);
    end

    % (Optional) re-anchor the "right side anchors" around current solution
    % to reduce overly conservative constraints in next outer pass:
    % apv_fixR = apv_star;   % <- uncomment if num_outer_pass > 1
end

apv_joint = sort(apv_star);

%% ------------------------------ Plot ------------------------------------
figure('Color','w'); hold on; box on;
y0 = zeros(size(apv_joint));
groups = split_into_groups(apv_joint, d, 1e-3*d);
colors = lines(max(groups));
for g = 1:max(groups)
    idx = find(groups == g);
    scatter(apv_joint(idx), y0(idx), 70, colors(g,:), 'filled', 'MarkerEdgeColor','k');
end
plot([-a a],[0 0],'k-','LineWidth',1.5);
xline(-a,'k:','LineWidth',1); xline(a,'k:','LineWidth',1); xline(0,'k--');
xlabel('Position x (on [-a,a])'); yticks([]); ylim([-0.3 0.3]); xlim([-a a]);
title(sprintf('Optimized APV (given u=%.3f, r=%.3f; aperture [-a,a])', u0, r0));
legend(arrayfun(@(g) sprintf('Group %d',g), 1:max(groups), 'UniformOutput',false), ...
       'Location','northoutside','Orientation','horizontal');

fprintf('Optimized APV (x in wavelengths):\n'); disp(apv_joint.');

end

%% ================== Objective: GIVEN (u0,r0) ============================
function val = objective_given_ur_cpu_core(x, u0, r0)
% CRBu + CRBr at given (u0,r0), with all moments about origin 0.
[varx, varx2, covxx2, Delta] = moment_terms_origin0(x);
Delta = max(Delta, 1e-12);     % guard degeneracy

CRBu = varx2 / Delta;

num = 4*(r0^4)*varx + 8*u0*(r0^3)*covxx2 + 4*(u0^2)*(r0^2)*varx2;
den = (1 - u0^2)^2;
CRBr = num / (den * Delta);

val = 1 / (CRBu + CRBr);
end

%% ======================= Initial two-group on [-a,a] ====================
function x0 = two_group_init_sym(N, d, a)
% Ends-loaded template: -a, -a+d, ..., and a, a-d, ...
left_cnt  = floor(N/2);
right_cnt = N - left_cnt;

left_grp  = (-a) + (0:left_cnt-1)*d;
right_grp = (+a) - (0:right_cnt-1)*d;

x0 = sort([left_grp, right_grp]);

% Feasibility checks
if any(abs(x0) > a + 1e-9)
    error('Initial APV exceeds aperture [-a,a]. Increase a or reduce N/d.');
end
if any(diff(x0) < d - 1e-9)
    error('Initial APV violates min spacing d.');
end
end

%% =================== Moments about origin 0 =============================
function [varx, varx2, covxx2, Delta] = moment_terms_origin0(x)
x   = x(:).';
x2  = x.^2;
mx  = mean(x);
mx2 = mean(x2);

varx   = mean(x.^2)  - mx^2;
varx2  = mean(x2.^2) - mx2^2;
covxx2 = mean(x.*x2) - mx*mx2;

Delta = varx*varx2 - covxx2^2;
end

%% =================== Grouping for Fig.5-style coloring ==================
function groups = split_into_groups(x_sorted, d, tol)
dx = diff(x_sorted);
groups = ones(size(x_sorted));
g = 1;
for i = 1:numel(dx)
    if abs(dx(i) - d) <= tol
        groups(i+1) = g;
    else
        g = g + 1;
        groups(i+1) = g;
    end
end
end
