lambda = 8e-3;          % 8 mm
a      = 10*lambda;     % half-aperture
u      = 0.6;           % cos(theta)
theta  = acos(u);
r      = 10;            % meters

% mode = 'PA' or 'MIMO'
[p1_opt, p0_opt, Tr_min] = search_p1_p0_minTrCRB_with_amp(theta, r, lambda, a, ...
                                    'PA', 0.005, 1e-6, 1e-6*max(r,1));

function [p1_star, p0_star, TrCRB_min] = search_p1_p0_minTrCRB_with_amp(theta, r, lambda, a, ...
    mode, gridStep, epsTheta, epsR)
% Page-1 CRB search over (p1,p0) with 1/r amplitude kept.
% Support locations: {-a, 0, +a}; weights: [p1, p0, p2=1-p1-p0].
% Follows the generic page-1 CRB forms: uses g, g_theta, g_r only.
%
% INPUTS
%   theta   : AoA in radians (used via cos(theta))
%   r       : range (m)
%   lambda  : wavelength (m)
%   a       : half aperture (m); support at x = {-a,0,+a}
%   mode    : 'PA'  -> g = a_w              (phased-array like)
%             'MIMO'-> g = kron(a_w,a_w)    (example composite)
%   gridStep: step for p1 & p0 grid (e.g., 0.005)
%   epsTheta: finite-diff step for theta (e.g., 1e-6)
%   epsR    : finite-diff step for r (e.g., 1e-6*max(r,1))
%
% OUTPUTS
%   p1_star, p0_star : minimizing weights for left & center
%   TrCRB_min        : minimal Tr(CRB) found

if nargin < 5 || isempty(mode),      mode = 'PA';           end
if nargin < 6 || isempty(gridStep),  gridStep = 0.005;      end
if nargin < 7 || isempty(epsTheta),  epsTheta = 1e-6;       end
if nargin < 8 || isempty(epsR),      epsR     = 1e-6*max(r,1); end

% 3-point support
xs = [-a, 0, +a];

% best-so-far
TrCRB_min = inf; p1_star = NaN; p0_star = NaN;

% --- helper: Tr(CRB) from {g, gθ, gr} via page-1 formula
    function TrCRB = trCRB_from_g(g, gth, gr)
        ng   = norm(g);
        ngth = norm(gth);
        ngr  = norm(gr);

        % sin^2Ω and sin^2Θ  (projection rejections)
        sin2Omega = max(1 - (abs(gth'*g)^2)/(ngth^2*ng^2 + eps), 0);
        sin2Theta = max(1 - (abs(gr' *g)^2)/(ngr^2 *ng^2 + eps), 0);

        % W = (gθ^H gr) I - gθ gr^H ;  Q12 = Re{ g^H W g } / ||g||^2
        Ghg  = (gth' * gr);
        Wg   = Ghg * g - gth * (gr' * g);

        Q11  = ngth^2 * sin2Omega;
        Q22  = ngr^2  * sin2Theta;
        Q12  = real(g' * Wg) / (ng^2 + eps);

        detQp = Q11*Q22 - Q12^2;

        % numerical guard for robustness
        det_guard = 1e-14*(Q11*Q22 + Q12^2 + eps);
        detQp = max(detQp, det_guard);

        % common factor N0/(2|rho|^2) cancels for argmin over (p1,p0)
        CRB_theta = Q22 / detQp;
        CRB_r     = Q11 / detQp;
        TrCRB     = CRB_theta + CRB_r;   % A-optimal metric
    end

% --- builder: g(r,theta) given weights p = [p1, p0, p2]
% KEEP 1/r amplitude: a_m = (1/r_m) * exp(-j 2π r_m / λ)
    function g = g_builder(theta_, r_, p)
        rm   = sqrt(r_^2 - 2*r_*cos(theta_)*xs + xs.^2);   % exact spherical distance
        a_vec= (1./rm) .* exp(-1j*2*pi*rm/lambda);         % <-- keep 1/r amplitude
        a_w  = (p(:)).' .* a_vec;                          % linear weights (NOT sqrt)

        switch upper(mode)
            case 'MIMO'
                g = kron(a_w, a_w).';   % column vector
            otherwise % 'PA'
                g = a_w.';              % column vector
        end
    end

% --- grid over feasible triangle: p1>=0, p0>=0, p2=1-p1-p0>=0
pVals = 0:gridStep:1;
for p1 = pVals
    p0_max = 1 - p1;
    p0Vals = 0:gridStep:p0_max;

    for p0 = p0Vals
        p2 = 1 - p1 - p0;
        if p2 < 0, continue; end

        p = [p1, p0, p2];

        % central finite differences for gθ and gr
        g    = g_builder(theta, r, p);
        g_th = (g_builder(theta+epsTheta, r, p) - g_builder(theta-epsTheta, r, p))/(2*epsTheta);
        g_r  = (g_builder(theta, r+epsR, p)     - g_builder(theta, r-epsR, p)    )/(2*epsR);

        TrC = trCRB_from_g(g, g_th, g_r);

        if isfinite(TrC) && TrC < TrCRB_min
            TrCRB_min = TrC;
            p1_star   = p1;
            p0_star   = p0;
        end
    end
end

fprintf('Best (p1,p0,p2) = (%.4f, %.4f, %.4f);  min Tr(CRB) = %.6e\n', ...
        p1_star, p0_star, 1-p1_star-p0_star, TrCRB_min);
end
