function apv_joint = optimize_apv_joint_fig5_parallel_cpu()
% Parallel discrete-sampling optimizer for APV (CPU-only)
% - Inner loop (candidate scoring) is parallelized with PARFOR on CPU
% - No GPU code anywhere
%
% Usage:
%   apv = optimize_apv_joint_fig5_parallel_cpu();

clc; clear; close all;

%% ------------------------- Problem Parameters ---------------------------
lambda = 1.0;                 % wavelength (normalized units)
N      = 16;                  % number of antennas
d      = 0.5*lambda;          % minimum inter-antenna spacing
A      = 10*lambda;           % movement region length
M      = 2000;                % number of discrete sampling points (M >> N)
S      = linspace(0, A, M);   % discrete candidate locations

% Near-field distance bounds (typical textbook formulas; replace with your paper's exact range if needed)
R_FS  = 0.62*sqrt(A^3/lambda);   % Fresnel (near-field) lower bound
R_RL  = 2*A^2/lambda;            % Rayleigh distance (far-field) boundary
r_min = R_FS;
r_max = R_RL/2;

% Worst-case search grids for u and r (avoid u=1 singularity)
Nu = 101;  Nr = 151;
u_grid = linspace(0, 0.99, Nu);
r_grid = linspace(r_min, r_max, Nr);

% Start a CPU pool once (prefer thread-based for lower overhead)
pool = gcp('nocreate');
if isempty(pool)
    try
        parpool('threads');       % MATLAB R2020a+ supports thread-based pool for many functions
    catch
        parpool;                  % fallback to default profile (process-based)
    end
end

%% --------------------- Initialization (two-group) -----------------------
apv_init = two_group_init(N, d, A);  % ends-loaded, half-wavelength spacing
apv_star = nan(1, N);                % will hold sequentially updated positions
apv_fixR = apv_init;                 % right-side placeholders (not-yet-updated)

%% ------------------- Sequential update over elements --------------------
for n = 1:N
    % ----- Build feasible candidate set S_n (respect min spacing d) -----
    S_mask = true(size(S));

    % Keep >= d from already-updated left portion
    for i = 1:n-1
        S_mask = S_mask & (abs(S - apv_star(i)) >= d - 1e-9);
    end
    % Keep >= d from not-yet-updated right portion (initial anchors)
    for j = n+1:N
        S_mask = S_mask & (abs(S - apv_fixR(j)) >= d - 1e-9);
    end

    S_n = S(S_mask);
    if isempty(S_n)
        error('Feasible set S_n is empty at n=%d. Increase M or relax constraints.', n);
    end

    % ----- Parallel scoring over candidates s in S_n (CPU-only) ----------
    scores = -inf(1, numel(S_n));  % preallocate for PARFOR reduction-like pattern
    % Read-only snapshots for parfor body (avoid shared-state writes)
    left_fixed  = apv_star(1:n-1);
    right_fixed = apv_fixR(n+1:N);
    ugrid_local = u_grid;   %#ok<NASGU>
    rgrid_local = r_grid;   %#ok<NASGU>

    parfor k = 1:numel(S_n)
        s = S_n(k);
        x_hat = [left_fixed, s, right_fixed];  % candidate APV
        scores(k) = objective_inverse_trace_cpu(x_hat, ugrid_local, rgrid_local);
    end

    % ----- Pick the best candidate and commit ----------------------------
    [~, idx] = max(scores);
    best_s   = S_n(idx);
    apv_star(n) = best_s;
end

apv_joint = sort(apv_star);

%% ------------------------------ Plot (Fig.5-like) -----------------------
figure('Color','w'); hold on; box on;
y0 = zeros(size(apv_joint));

% Color groups with ~half-wavelength intra-group gaps
groups = split_into_groups(apv_joint, d, 1e-3*d);
colors = lines(max(groups));
for g = 1:max(groups)
    idx = find(groups == g);
    scatter(apv_joint(idx), y0(idx), 70, colors(g,:), 'filled', 'MarkerEdgeColor','k');
end

plot([0 A],[0 0],'k-','LineWidth',1.5);
xline(0,'k:','LineWidth',1); xline(A,'k:','LineWidth',1);
xlabel('Position x'); yticks([]); ylim([-0.3 0.3]); xlim([0 A]);
title('Optimized APV (CPU-parallel candidate scoring)');
legend(arrayfun(@(g) sprintf('Group %d',g), 1:max(groups), 'UniformOutput',false), ...
       'Location','northoutside','Orientation','horizontal');

fprintf('Optimized APV (x in wavelengths):\n');
disp(apv_joint.');

end

%% ================== Objective (CPU-only, vectorized) ====================
function val = objective_inverse_trace_cpu(x, u_grid, r_grid)
% Compute 1 / ( CRBu(x) + max_{u,r} CRBr(x,u,r) ) on CPU
[varx, varx2, covxx2, Delta] = moment_terms(x);
Delta = max(Delta, 1e-12);

% CRBu (kappa cancels in geometry optimization)
CRBu = varx2 / Delta;

% Vectorized worst-case CRBr over (u,r)
[U, R] = ndgrid(u_grid, r_grid);
num = 4*(R.^4)*varx + 8*U.*(R.^3)*covxx2 + 4*(U.^2).*(R.^2)*varx2;
den = (1 - U.^2).^2;
CRBr_grid  = num ./ (den * Delta);
CRBr_worst = max(CRBr_grid, [], 'all');

val = 1 / (CRBu + CRBr_worst);
end

%% ======================= Initial two-group APV ==========================
function x0 = two_group_init(N, d, A)
% Place half at the left end and half at the right end with spacing d
left_cnt  = floor(N/2);
right_cnt = N - left_cnt;
left_grp  = (0:left_cnt-1)*d;
right_grp = A - (right_cnt-1:-1:0)*d;
x0 = sort([left_grp, right_grp]);
if any(diff(x0) < d - 1e-9)
    error('Initial APV violates min spacing d.');
end
end

%% =================== Moments: var/cov building blocks ===================
function [varx, varx2, covxx2, Delta] = moment_terms(x)
x  = x(:).';
x2 = x.^2;
mx  = mean(x);   mx2 = mean(x2);
varx   = mean(x.^2) - mx^2;
varx2  = mean(x2.^2) - mx2^2;
covxx2 = mean(x.*x2) - mx*mx2;
Delta = varx*varx2 - covxx2^2;
end

%% =================== Grouping for Fig.5-style coloring ==================
function groups = split_into_groups(x_sorted, d, tol)
dx = diff(x_sorted);
groups = ones(size(x_sorted));
g = 1;
for i = 1:numel(dx)
    if abs(dx(i) - d) <= tol
        groups(i+1) = g;      % same group if near half-wavelength spacing
    else
        g = g + 1;            % new group when a larger gap appears
        groups(i+1) = g;
    end
end
end
